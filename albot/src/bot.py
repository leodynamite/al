from __future__ import annotations

import asyncio
from dataclasses import dataclass
from pathlib import Path
from typing import Optional, List, Dict, Any

from loguru import logger
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram.constants import ParseMode
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler, CallbackQueryHandler,
)

from .config import AppConfig
from .llm import LLMClient
from .parsing import parse_file, ParsedData
from .integrations import send_email_smtp, SupabaseClient
from .models import Script, ScriptQuestion, QuestionType
from .billing import BillingManager, SubscriptionTier
from .analytics import AnalyticsManager, EventType
from .monitoring import MonitoringManager
from .commands import BotCommands
from .branding import BrandingManager
from .hot_leads import HotLeadsManager
from .error_handler import ErrorHandler
from .ux_texts import UXTexts
from .commercial import CommercialManager


ASK_NAME, ASK_GOAL = range(2)

# –û–Ω–±–æ—Ä–¥–∏–Ω–≥: —Å–æ—Å—Ç–æ—è–Ω–∏—è
(
    Q_BIZ_TYPE,
    Q_AVG_CHECK,
    Q_CHANNEL,
    Q_GOAL_MULTI,
    Q_URGENCY,
    Q_REGION,
    Q_AGENTS,
    Q_OUTBOUND,
    Q_LEGAL,
) = range(10, 19)

SUPPORTED_EXTENSIONS = {".csv", ".xlsx", ".xls", ".pdf", ".docx", ".txt"}


@dataclass
class UserSession:
    name: Optional[str] = None
    goal: Optional[str] = None
    input_file_path: Optional[Path] = None


class ALBot:
    def __init__(self, config: AppConfig) -> None:
        self.config = config
        self._app: Optional[Application] = None
        self._llm = LLMClient(config.llm)
        self._supabase = SupabaseClient(
            config.supabase_url or "",
            config.supabase_anon_key or "",
            config.encryption_key
        )
        self._billing = BillingManager(config, self._supabase)
        self._analytics = AnalyticsManager(config, self._supabase)
        self._monitoring = MonitoringManager(config, self._supabase)
        self._commands = BotCommands(self._billing, self._analytics, self._monitoring, self._supabase)
        self._branding = BrandingManager()
        self._hot_leads = HotLeadsManager(config, self._supabase, self._analytics)
        self._error_handler = ErrorHandler(self._monitoring, self._supabase)
        self._ux_texts = UXTexts(self._branding, self._billing)
        self._commercial = CommercialManager(self._billing, self._branding, self._analytics)

    def build(self) -> Application:
        app = (
            ApplicationBuilder()
            .token(self.config.telegram.bot_token)
            .concurrent_updates(True)
            .build()
        )

        app.add_handler(CommandHandler("start", self.on_start))
        app.add_handler(CommandHandler("help", self.on_help))
        app.add_handler(CommandHandler("offer", self.on_offer))
        app.add_handler(CommandHandler("metrics", self._commands.on_metrics))
        app.add_handler(CommandHandler("leads", self._commands.on_leads))
        app.add_handler(CommandHandler("settings", self._commands.on_settings))
        app.add_handler(CommandHandler("stop", self._commands.on_stop))
        app.add_handler(CommandHandler("billing", self._commands.on_billing))
        app.add_handler(CommandHandler("export", self._commands.on_export))
        app.add_handler(CommandHandler("delete_my_data", self._commands.on_delete_my_data))
        app.add_handler(CommandHandler("terms", self._commands.on_terms))
        app.add_handler(CommandHandler("status", self._commands.on_system_status))
        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
        app.add_handler(CommandHandler("connect_calendar", self.on_connect_calendar))
        app.add_handler(CommandHandler("calendar_code", self.on_calendar_code))
        app.add_handler(CommandHandler("calendar", self.on_calendar))

        # File upload
        app.add_handler(MessageHandler(filters.Document.ALL, self.on_file))

        # Simple questionnaire
        conv = ConversationHandler(
            entry_points=[CommandHandler("brief", self.on_brief_start)],
            states={
                ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_name)],
                ASK_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_goal)],
            },
            fallbacks=[CommandHandler("cancel", self.on_cancel)],
            name="brief",
            persistent=False,
        )
        app.add_handler(conv)

        # –û–Ω–±–æ—Ä–¥–∏–Ω–≥-–≤–æ–ø—Ä–æ—Å–Ω–∏–∫ (–µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞)
        onboarding = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.on_onboarding_start, pattern="^menu_brief$")],
            states={
                Q_BIZ_TYPE: [CallbackQueryHandler(self.on_q_biz_type)],
                Q_AVG_CHECK: [CallbackQueryHandler(self.on_q_avg_check)],
                Q_CHANNEL: [CallbackQueryHandler(self.on_q_channel)],
                Q_GOAL_MULTI: [CallbackQueryHandler(self.on_q_goal_multi)],
                Q_URGENCY: [CallbackQueryHandler(self.on_q_urgency)],
                Q_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_q_region)],
                Q_AGENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_q_agents)],
                Q_OUTBOUND: [CallbackQueryHandler(self.on_q_outbound)],
                Q_LEGAL: [CallbackQueryHandler(self.on_q_legal)],
            },
            fallbacks=[CommandHandler("cancel", self.on_cancel)],
            name="onboarding",
            persistent=False,
        )
        app.add_handler(onboarding)

        # Callback buttons (—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –∏ –æ–±—â–µ–µ)
        app.add_handler(CallbackQueryHandler(self.on_toggle_mandatory, pattern=r"^toggle:mandatory:"))
        app.add_handler(CallbackQueryHandler(self.on_weight_change, pattern=r"^weight:q:"))
        app.add_handler(CallbackQueryHandler(self.on_set_hot_values, pattern=r"^hotvals:q:"))
        app.add_handler(CallbackQueryHandler(self.on_move_question, pattern=r"^move:q:"))
        app.add_handler(CallbackQueryHandler(self.on_change_type, pattern=r"^type:q:"))
        app.add_handler(CallbackQueryHandler(self.on_edit_question, pattern=r"^edit:q:"))
        app.add_handler(CallbackQueryHandler(self.on_cancel_edit, pattern="^cancel_edit$"))
        app.add_handler(CallbackQueryHandler(self.on_activate_script, pattern="^activate_script$"))
        app.add_handler(CallbackQueryHandler(self.on_dashboard_action, pattern="^(detailed_metrics|leads_list|export_csv|export_sheets|refresh_metrics|back_to_dashboard|open_settings)$"))
        app.add_handler(CallbackQueryHandler(self.on_action))
        app.add_handler(CallbackQueryHandler(self.on_commercial_offer, pattern="^commercial_offer$"))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_text_input))

        self._app = app
        return app

    async def on_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text input for various purposes"""
        # Check if user is waiting for hot values input
        if context.user_data.get("waiting_for_hot_values"):
            await self.on_hot_values_input(update, context)
            return
            
        # Check if user is editing question text
        if context.user_data.get("waiting_for_question_text"):
            await self.on_save_question_text(update, context)
            return
            
        # Default response
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"
        )

    async def on_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.effective_user
        if not user:
            return
        
        # Track user onboarding
        await self._analytics.track_user_onboarded(user.id, "start_command")
        
        # Check subscription status
        subscription = await self._billing.get_user_subscription(user.id)
        if not subscription:
            subscription = await self._billing.create_trial_subscription(user.id)
        
        # Check if trial expired or read-only mode
        if await self._billing.check_trial_expired(subscription):
            await update.message.reply_text(
                "üîí –í–∞—à trial –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫. –ë–æ—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ read-only —Ä–µ–∂–∏–º.\n"
                "–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—è, –Ω–æ–≤—ã–µ –ª–∏–¥—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.\n"
                "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí∞ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="menu_pricing")
                ]])
            )
            return
        
        # Check if in read-only mode
        if subscription.is_read_only:
            await update.message.reply_text(
                "üîí –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ read-only —Ä–µ–∂–∏–º–µ.\n"
                "–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—è, –Ω–æ–≤—ã–µ –ª–∏–¥—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.\n"
                "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí∞ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="menu_pricing")
                ]])
            )
            return
        
        # Get branding based on subscription
        branding = self._branding.get_bot_branding(subscription)
        welcome_text = await self._ux_texts.get_welcome_message(user.id)
        
        # Add subscription info
        if subscription.status.value == "trial":
            trial_info = self._billing.get_trial_info(subscription)
            welcome_text += f"\n\n*–°—Ç–∞—Ç—É—Å:* {trial_info}"
        
        webapp_buttons = []
        if getattr(self.config, "webapp_url", None) and str(self.config.webapp_url).startswith("https"):
            webapp_buttons.append(InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=str(self.config.webapp_url))))

        kb = InlineKeyboardMarkup([
            webapp_buttons if webapp_buttons else [],
            [
                InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="menu_upload"),
                InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", callback_data="menu_brief"),
            ],
            [
                InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ", callback_data="menu_demo"),
                InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã", callback_data="menu_pricing"),
            ],
            [
                InlineKeyboardButton("üìä –ú–µ—Ç—Ä–∏–∫–∏", callback_data="menu_metrics"),
                InlineKeyboardButton("üë• –õ–∏–¥—ã", callback_data="menu_leads"),
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"),
            ],
            [
                InlineKeyboardButton("üíº –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="commercial_offer"),
            ],
        ])
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=kb,
        )

    async def on_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        help_text = self._ux_texts.get_help_message()
        await update.message.reply_text(help_text)
    
    async def on_offer(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Commercial offer command handler"""
        user = update.effective_user
        if not user:
            return
        
        # Get commercial offer
        offer = await self._commercial.get_commercial_offer(user.id)
        
        if offer["offer_type"] == "trial":
            text = f"üöÄ {offer['title']}\n\n{offer['description']}\n\n"
            text += "‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            for benefit in offer["benefits"]:
                text += f"‚Ä¢ {benefit}\n"
            text += "\n‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
            for limitation in offer["limitations"]:
                text += f"‚Ä¢ {limitation}\n"
            text += f"\nüí∞ –¶–µ–Ω–∞: {offer['price']}"
            
        elif offer["offer_type"] == "upgrade":
            text = f"‚è∞ {offer['title']}\n\n{offer['description']}\n\n"
            text += "‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            for benefit in offer["benefits"]:
                text += f"‚Ä¢ {benefit}\n"
            text += f"\nüß† {offer['psychological_effect']}\n\n"
            text += "üí∞ –¢–∞—Ä–∏—Ñ—ã:\n"
            for tier, info in offer["pricing"].items():
                text += f"‚Ä¢ {tier.title()}: {info['price']} ({info['dialogs']})\n"
                
        else:  # current_plan
            text = f"‚úÖ {offer['title']}\n\n{offer['description']}\n\n"
            text += "‚úÖ –í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            for benefit in offer["benefits"]:
                text += f"‚Ä¢ {benefit}\n"
            text += f"\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {offer['usage']['dialogs_used']}/{offer['usage']['dialogs_limit']} –¥–∏–∞–ª–æ–≥–æ–≤"
        
        # Add ROI calculation
        roi = await self._commercial.get_roi_calculation(user.id)
        if roi.get("calculation"):
            text += f"\n\nüí∞ {roi['message']}\n"
            calc = roi["calculation"]
            text += f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {calc['potential_revenue']:,.0f} ‚ÇΩ\n"
            text += f"‚Ä¢ ROI: {calc['roi_percent']:.1f}%\n"
            text += f"‚Ä¢ {roi['conclusion']}"
        
        await update.message.reply_text(text)
    
    async def on_commercial_offer(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Commercial offer button handler"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        if not user:
            return
        
        # Get commercial offer
        offer = await self._commercial.get_commercial_offer(user.id)
        
        if offer["offer_type"] == "trial":
            text = f"üöÄ {offer['title']}\n\n{offer['description']}\n\n"
            text += "‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            for benefit in offer["benefits"]:
                text += f"‚Ä¢ {benefit}\n"
            text += "\n‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
            for limitation in offer["limitations"]:
                text += f"‚Ä¢ {limitation}\n"
            text += f"\nüí∞ –¶–µ–Ω–∞: {offer['price']}"
            
        elif offer["offer_type"] == "upgrade":
            text = f"‚è∞ {offer['title']}\n\n{offer['description']}\n\n"
            text += "‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            for benefit in offer["benefits"]:
                text += f"‚Ä¢ {benefit}\n"
            text += f"\nüß† {offer['psychological_effect']}\n\n"
            text += "üí∞ –¢–∞—Ä–∏—Ñ—ã:\n"
            for tier, info in offer["pricing"].items():
                text += f"‚Ä¢ {tier.title()}: {info['price']} ({info['dialogs']})\n"
                
        else:  # current_plan
            text = f"‚úÖ {offer['title']}\n\n{offer['description']}\n\n"
            text += "‚úÖ –í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            for benefit in offer["benefits"]:
                text += f"‚Ä¢ {benefit}\n"
            text += f"\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {offer['usage']['dialogs_used']}/{offer['usage']['dialogs_limit']} –¥–∏–∞–ª–æ–≥–æ–≤"
        
        # Add ROI calculation
        roi = await self._commercial.get_roi_calculation(user.id)
        if roi.get("calculation"):
            text += f"\n\nüí∞ {roi['message']}\n"
            calc = roi["calculation"]
            text += f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {calc['potential_revenue']:,.0f} ‚ÇΩ\n"
            text += f"‚Ä¢ ROI: {calc['roi_percent']:.1f}%\n"
            text += f"‚Ä¢ {roi['conclusion']}"
        
        # Add psychological benefits
        psych_benefits = await self._commercial.get_psychological_benefits()
        text += f"\n\n{psych_benefits['title']}\n"
        for benefit in psych_benefits["benefits"]:
            text += f"‚Ä¢ {benefit['title']}: {benefit['description']}\n"
        text += f"\n{psych_benefits['conclusion']}"
        
        await query.edit_message_text(text=text)

    async def on_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        assert update.message is not None
        doc = update.message.document
        if not doc:
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        suffix = ""
        if doc.file_name:
            suffix = Path(doc.file_name).suffix.lower()
        if suffix and suffix not in SUPPORTED_EXTENSIONS:
            await update.message.reply_text(
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .csv, .xlsx, .xls, .pdf, .docx, .txt"
            )
            return
        # Show upload progress
        status_msg = await update.message.reply_text("üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
        
        # Download file
        file = await doc.get_file()
        dest = self.config.storage.data_dir / f"{doc.file_id}_{doc.file_name or 'upload'}"
        await file.download_to_drive(custom_path=str(dest))
        
        # Update progress
        await status_msg.edit_text("üì• –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
        
        session = context.user_data.setdefault("session", UserSession())
        session.input_file_path = dest
        
        # Show analysis progress with countdown
        for i in range(15, 0, -1):
            await status_msg.edit_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª... ({i} —Å–µ–∫)")
            await asyncio.sleep(1)
        
        await status_msg.edit_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞
        parsed = parse_file(dest)
        # –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª
        if not parsed.contacts and not parsed.raw_text:
            csv_template = "name,phone,email,source,comment\n–ò–≤–∞–Ω,+7xxxxxxxxxx,ivan@example.com,upload,–ó–∞—è–≤–∫–∞"
            await update.message.reply_text("–§–∞–π–ª –ø—É—Å—Ç–æ–π. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –ø–æ —à–∞–±–ª–æ–Ω—É –Ω–∏–∂–µ:")
            await update.message.reply_text(f"```\n{csv_template}\n```", parse_mode=ParseMode.MARKDOWN)
            return
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç ‚Äî –∏–∑–≤–ª–µ—á—å —Å—É—â–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ LLM
        entities = {}
        if parsed.raw_text:
            entities = (await self._llm.extract_entities(parsed.raw_text)).get("entities", {})
        # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        parts = []
        if parsed.sample_ad:
            parts.append(f"–ü—Ä–∏–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {parsed.sample_ad}")
        if parsed.avg_price:
            parts.append(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {parsed.avg_price}")
        if parsed.address:
            parts.append(f"–ê–¥—Ä–µ—Å: {parsed.address}")
        if entities:
            parts.append(f"–°—É—â–Ω–æ—Å—Ç–∏: {entities}")
        if parsed.contacts:
            lead_lines = []
            for c in parsed.contacts[:5]:
                lead_lines.append(f"{c.name or ''} {c.phone or ''} {c.email or ''} {c.source or ''} {c.comment or ''}".strip())
            parts.append("–ö–æ–Ω—Ç–∞–∫—Ç—ã (–ø—Ä–∏–º–µ—Ä):\n" + "\n".join(lead_lines))
        context.user_data["parsed_prompt"] = "\n".join(parts)
        await self._run_llm(update, context, source="file")

    async def on_brief_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data["session"] = UserSession()
        await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        return ASK_NAME

    async def on_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        session: UserSession = context.user_data.get("session")
        session.name = update.message.text.strip()
        await update.message.reply_text("–ö–∞–∫–∞—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –¥–∏–∞–ª–æ–≥–∞? (–ø—Ä–∏–º–µ—Ä: –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–∞)")
        return ASK_GOAL

    async def on_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        session: UserSession = context.user_data.get("session")
        session.goal = update.message.text.strip()
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑‚Ä¶")
        await self._run_llm(update, context, source="brief")
        return ConversationHandler.END

    async def on_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    async def _run_llm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, *, source: str):
        session: UserSession = context.user_data.get("session")
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –∞–Ω–∫–µ—Ç—ã/—Ñ–∞–π–ª–∞
        parts = []
        if session and session.name:
            parts.append(f"–ò–º—è: {session.name}")
        if session and session.goal:
            parts.append(f"–¶–µ–ª—å: {session.goal}")
        if session and session.input_file_path:
            parts.append(f"–§–∞–π–ª: {session.input_file_path.name}")
        if context.user_data.get("parsed_prompt"):
            parts.append(context.user_data["parsed_prompt"])
        prompt = "\n".join(parts) or "–ü–æ–¥–≥–æ—Ç–æ–≤—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏–¥–∞."
        # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
        if source in {"file", "onboarding"} and context.user_data.get("parsed_prompt"):
            try:
                result = await asyncio.wait_for(
                    self._llm.analyze_agency(context.user_data["parsed_prompt"]),
                    timeout=25,
                )
            except asyncio.TimeoutError:
                await update.message.reply_text("‚è±Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ AI –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∫–∞–∑—ã–≤–∞—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω.")
                result = {"script": ScriptTemplates().get_universal_template()}
            except Exception:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç AI. –ü–æ–∫–∞–∑—ã–≤–∞—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω.")
                result = {"script": ScriptTemplates().get_universal_template()}
        elif source == "brief":
            result = await self._llm.script_from_answers({
                "name": getattr(session, "name", None),
                "goal": getattr(session, "goal", None),
            })
        else:
            result = await self._llm.generate_script({"prompt": prompt, "source": source})
        context.user_data["last_result"] = result
        # –°–æ—Ö—Ä–∞–Ω–∏–º —Å–∫—Ä–∏–ø—Ç –≤ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–µ–Ω —Å–ø–∏—Å–æ–∫
        self._ensure_script_model(context, result)
        script = result.get("script", "–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–∫—Ä–∏–ø—Ç–∞")
        recs_list = result.get("recommendations", [])
        recs = "\n".join(f"- {r}" for r in recs_list) if recs_list else "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç."

        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫—Ä–∏–ø—Ç", callback_data="view_script"),
                InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="edit_script"),
            ],
            [
                InlineKeyboardButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", callback_data="apply_and_test"),
            ],
        ])
        text = self._ux_texts.get_script_ready_message()
        if update.message:
            await update.message.reply_html(text, reply_markup=kb, disable_web_page_preview=True)
        elif update.callback_query:
            await update.callback_query.edit_message_text(text=text, reply_markup=kb, parse_mode=ParseMode.HTML)

    async def on_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if not query:
            return
        await query.answer()
        action = query.data
        if action == "menu_upload":
            await query.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª (.csv, .xlsx, .pdf, .docx)")
        elif action == "menu_brief":
            # –≠—Ç–æ—Ç –∫–µ–π—Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç onboarding ConversationHandler
            return
        elif action == "menu_demo":
            await query.message.reply_text(
                "–î–µ–º–æ: –ø—Ä–∏–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞\n‚Äî –ë–æ—Ç: –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n‚Äî –õ–∏–¥: –•–æ—á—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é...\n\n–î–µ–º–æ –¥–∞—à–±–æ—Ä–¥–∞: –ö–æ–Ω–≤–µ—Ä—Å–∏—è, –∫–æ–ª-–≤–æ –ª–∏–¥–æ–≤, % –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö."
            )
        elif action == "menu_pricing":
            await query.message.reply_text(
                "–¢–∞—Ä–∏—Ñ—ã: Starter $29, Pro $99, Scale $299. /billing –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"
            )
        elif action == "view_script":
            await self._show_script(query, context)
        elif action == "edit_script":
            await self._show_script_editor(query, context)
        elif action == "apply_and_test":
            # Show preview dialog first
            await self._show_preview_dialog(query, context)
        elif action == "test_auto":
            await query.message.reply_text("–°–∏–º—É–ª—è—Ü–∏—è: 10 –¥–∏–∞–ª–æ–≥–æ–≤, –Ω–∞–π–¥–µ–Ω–æ 3 hot-–ª–∏–¥–∞. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ–∑–≤–æ–Ω.")
        elif action == "test_inbound":
            await query.message.reply_text("–û–∂–∏–¥–∞—é –≤—Ö–æ–¥—è—â–∏–µ –ª–∏–¥—ã‚Ä¶ (–∑–∞–≥–ª—É—à–∫–∞)")
        elif action == "menu_metrics":
            await self._show_metrics(query, context)
        elif action == "menu_settings":
            await self._show_settings(query, context)
        elif action == "menu_leads":
            await self._show_leads(query, context)
        elif action == "back_to_main":
            await self._show_main_menu(query, context)

    async def _open_editor(self, query, context: ContextTypes.DEFAULT_TYPE):
        await self._show_script_editor(query, context)
    
    async def _show_metrics(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
        metrics_text = """üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞**
        
**–°–µ–≥–æ–¥–Ω—è:**
‚Ä¢ –õ–∏–¥–æ–≤: 12
‚Ä¢ –ì–æ—Ä—è—á–∏—Ö: 3
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 25%

**–ó–∞ –Ω–µ–¥–µ–ª—é:**
‚Ä¢ –õ–∏–¥–æ–≤: 47
‚Ä¢ –ì–æ—Ä—è—á–∏—Ö: 12
‚Ä¢ –í—Å—Ç—Ä–µ—á: 8

**–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏:**
‚Ä¢ –ê–≤–∏—Ç–æ: 35%
‚Ä¢ –ü—Ä—è–º—ã–µ –∑–≤–æ–Ω–∫–∏: 28%
‚Ä¢ Instagram: 22%"""
        
        keyboard = [
            [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="detailed_metrics")],
            [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            metrics_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def _show_settings(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        settings_text = """‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**
        
**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**
‚Ä¢ CRM: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
‚Ä¢ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
‚Ä¢ Email: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ

**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
‚Ä¢ Push: –í–∫–ª—é—á–µ–Ω–æ
‚Ä¢ Email: –í—ã–∫–ª—é—á–µ–Ω–æ

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: –í–∫–ª—é—á–µ–Ω–æ
‚Ä¢ –õ–æ–≥–∏: –ß–∞—Å—Ç–∏—á–Ω–æ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã"""
        
        keyboard = [
            [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å CRM", callback_data="setup_crm")],
            [InlineKeyboardButton("üìÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="setup_calendar")],
            [InlineKeyboardButton("üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email", callback_data="setup_email")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            settings_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def _show_leads(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥—ã"""
        leads_text = """üë• **–õ–∏–¥—ã**
        
**–ì–æ—Ä—è—á–∏–µ (3):**
‚Ä¢ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ - –ú–æ—Å–∫–≤–∞, 12–º–ª–Ω
‚Ä¢ –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞ - –°–ü–±, 8–º–ª–Ω
‚Ä¢ –ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤ - –ö–∞–∑–∞–Ω—å, 15–º–ª–Ω

**–¢–µ–ø–ª—ã–µ (5):**
‚Ä¢ –ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞ - –ú–æ—Å–∫–≤–∞, 5–º–ª–Ω
‚Ä¢ –î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤ - –°–ü–±, 7–º–ª–Ω
‚Ä¢ –ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞ - –ö–∞–∑–∞–Ω—å, 6–º–ª–Ω
‚Ä¢ –°–µ—Ä–≥–µ–π –ù–æ–≤–∏–∫–æ–≤ - –ú–æ—Å–∫–≤–∞, 4–º–ª–Ω
‚Ä¢ –û–ª—å–≥–∞ –õ–µ–±–µ–¥–µ–≤–∞ - –°–ü–±, 9–º–ª–Ω

**–•–æ–ª–æ–¥–Ω—ã–µ (12):**
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ..."""
        
        keyboard = [
            [InlineKeyboardButton("üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã", callback_data="hot_leads")],
            [InlineKeyboardButton("üìû –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á–∏", callback_data="schedule_meetings")],
            [InlineKeyboardButton("üìä –§–∏–ª—å—Ç—Ä—ã", callback_data="leads_filters")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            leads_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def _show_main_menu(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        welcome_text = """–ü—Ä–∏–≤–µ—Ç! –Ø AL Bot ‚Äî –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —è —Ä–∞–±–æ—Ç–∞—é –ø–æ–¥ —Å–≤–æ–∏–º –±—Ä–µ–Ω–¥–æ–º.
–í –ø–ª–∞—Ç–Ω–æ–π ‚Äî –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        webapp_buttons = []
        if getattr(self.config, "webapp_url", None) and str(self.config.webapp_url).startswith("https"):
            webapp_buttons.append(InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=str(self.config.webapp_url))))

        keyboard = [
            webapp_buttons if webapp_buttons else [],
            [
                InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="menu_upload"),
                InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", callback_data="menu_brief"),
            ],
            [
                InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ", callback_data="menu_demo"),
                InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã", callback_data="menu_pricing"),
            ],
            [
                InlineKeyboardButton("üìä –ú–µ—Ç—Ä–∏–∫–∏", callback_data="menu_metrics"),
                InlineKeyboardButton("üë• –õ–∏–¥—ã", callback_data="menu_leads"),
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"),
            ],
            [
                InlineKeyboardButton("üíº –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="commercial_offer"),
            ],
        ]
        
        await query.edit_message_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # ===== –°–∫—Ä–∏–ø—Ç/—Ä–µ–¥–∞–∫—Ç–æ—Ä =====
    def _ensure_script_model(self, context: ContextTypes.DEFAULT_TYPE, result: Dict[str, Any]) -> None:
        if context.user_data.get("script_model"):
            return
        scr = result.get("script")
        if not isinstance(scr, list):
            return
        questions: List[ScriptQuestion] = []
        for idx, item in enumerate(scr, start=1):
            qid = str(item.get("id") or f"q{idx}")
            qtype_val = str(item.get("type") or "text")
            try:
                qtype = QuestionType(qtype_val) if qtype_val in QuestionType._value2member_map_ else QuestionType.text
            except Exception:
                qtype = QuestionType.text
            questions.append(ScriptQuestion(
                id=qid,
                order=int(item.get("order") or idx),
                text=str(item.get("text") or "–í–æ–ø—Ä–æ—Å"),
                type=qtype,
                choices=item.get("choices") if isinstance(item.get("choices"), list) else None,
                mandatory=bool(item.get("mandatory") or False),
                weight=int(item.get("weight") or 0),
                hot_values=item.get("hot_values") if isinstance(item.get("hot_values"), list) else None,
            ))
        context.user_data["script_model"] = Script(id="scr_1", name="–ß–µ—Ä–Ω–æ–≤–∏–∫", created_by="org_1", questions=sorted(questions, key=lambda q: q.order))

    async def _show_script(self, query, context: ContextTypes.DEFAULT_TYPE):
        script: Script | None = context.user_data.get("script_model")
        if not script:
            await query.message.reply_text("–°–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        lines = [f"{q.order}) {q.text} [{q.type}] {'*' if q.mandatory else ''}" for q in script.questions]
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("Preview", callback_data="preview"), InlineKeyboardButton("Activate", callback_data="activate")], [InlineKeyboardButton("Test 10", callback_data="test_auto")]])
        await query.message.reply_text("\n".join(lines), reply_markup=kb)

    async def _show_script_editor(self, query, context: ContextTypes.DEFAULT_TYPE):
        script: Script | None = context.user_data.get("script_model")
        if not script:
            await query.message.reply_text("–°–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        for q in sorted(script.questions, key=lambda z: z.order):
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Üë", callback_data=f"move:q:{q.id}:up"), InlineKeyboardButton("‚Üì", callback_data=f"move:q:{q.id}:down")],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:q:{q.id}"), InlineKeyboardButton("–¢–∏–ø", callback_data=f"type:q:{q.id}")],
                [InlineKeyboardButton("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π", callback_data=f"toggle:mandatory:{q.id}"), InlineKeyboardButton("–í–µ—Å -", callback_data=f"weight:q:{q.id}:-")],
                [InlineKeyboardButton(f"{q.weight}", callback_data="noop"), InlineKeyboardButton("–í–µ—Å +", callback_data=f"weight:q:{q.id}:+")],
                [InlineKeyboardButton("hot_values", callback_data=f"hotvals:q:{q.id}")],
            ])
            title = f"{q.order}) {q.text}\n–¢–∏–ø: {q.type}\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: {'–¥–∞' if q.mandatory else '–Ω–µ—Ç'}\n–í–µ—Å: {q.weight}\nHot: {', '.join(q.hot_values or [])}"
            await query.message.reply_text(title, reply_markup=kb)

    async def on_edit_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline question editing"""
        query = update.callback_query
        await query.answer()
        
        # Extract question ID from callback data
        data = query.data.split(":")
        if len(data) != 3 or data[0] != "edit":
            return
            
        question_id = data[2]
        script: Script | None = context.user_data.get("script_model")
        if not script:
            await query.message.reply_text("–°–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        # Find the question
        question = None
        for q in script.questions:
            if q.id == question_id:
                question = q
                break
                
        if not question:
            await query.message.reply_text("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Store question ID for editing
        context.user_data["editing_question_id"] = question_id
        
        # Ask for new text
        await query.message.reply_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:\n\n{question.text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
            ])
        )
        
        # Set conversation state for text input
        context.user_data["waiting_for_question_text"] = True

    async def on_save_question_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Save edited question text"""
        if not context.user_data.get("waiting_for_question_text"):
            return
            
        new_text = update.message.text.strip()
        if not new_text:
            await update.message.reply_text("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
            
        question_id = context.user_data.get("editing_question_id")
        if not question_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: ID –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        script: Script | None = context.user_data.get("script_model")
        if not script:
            await update.message.reply_text("–°–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        # Find and update the question
        for q in script.questions:
            if q.id == question_id:
                q.text = new_text
                break
                
        # Clear editing state
        context.user_data["waiting_for_question_text"] = False
        context.user_data["editing_question_id"] = None
        
        await update.message.reply_text(
            "‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="edit_script")]
            ])
        )

    async def on_cancel_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel question editing"""
        query = update.callback_query
        await query.answer()
        
        # Clear editing state
        context.user_data["waiting_for_question_text"] = False
        context.user_data["editing_question_id"] = None
        
        await query.message.reply_text(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìù –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="edit_script")]
            ])
        )

    async def _show_preview_dialog(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Show preview dialog with test leads"""
        script: Script | None = context.user_data.get("script_model")
        if not script:
            await query.message.reply_text("–°–∫—Ä–∏–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        # Generate test leads
        test_leads = [
            {"name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", "phone": "+7 999 123-45-67", "budget": "8 –º–ª–Ω", "urgency": "–°—Ä–æ—á–Ω–æ"},
            {"name": "–ú–∏—Ö–∞–∏–ª –°–∏–¥–æ—Ä–æ–≤", "phone": "+7 999 234-56-78", "budget": "12 –º–ª–Ω", "urgency": "–°—Ä–µ–¥–Ω–µ"},
            {"name": "–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞", "phone": "+7 999 345-67-89", "budget": "15 –º–ª–Ω", "urgency": "–°—Ä–æ—á–Ω–æ"},
            {"name": "–î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤", "phone": "+7 999 456-78-90", "budget": "6 –º–ª–Ω", "urgency": "–î–ª–∏—Ç–µ–ª—å–Ω–æ"},
            {"name": "–û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞", "phone": "+7 999 567-89-01", "budget": "20 –º–ª–Ω", "urgency": "–°—Ä–æ—á–Ω–æ"}
        ]
        
        preview_text = "üé≠ **Preview –¥–∏–∞–ª–æ–≥–∞ —Å —Ç–µ—Å—Ç-–ª–∏–¥–∞–º–∏:**\n\n"
        
        for i, lead in enumerate(test_leads, 1):
            preview_text += f"**{i}. {lead['name']}** ({lead['phone']})\n"
            preview_text += f"   –ë—é–¥–∂–µ—Ç: {lead['budget']}, –°—Ä–æ—á–Ω–æ—Å—Ç—å: {lead['urgency']}\n\n"
            
            # Simulate conversation
            for j, question in enumerate(script.questions[:3], 1):  # Show first 3 questions
                preview_text += f"ü§ñ {question.text}\n"
                if question.type == "choice":
                    preview_text += f"üë§ –í—ã–±–∏—Ä–∞–µ—Ç: {['–í–∞—Ä–∏–∞–Ω—Ç 1', '–í–∞—Ä–∏–∞–Ω—Ç 2', '–í–∞—Ä–∏–∞–Ω—Ç 3'][j % 3]}\n"
                elif question.type == "text":
                    preview_text += f"üë§ –û—Ç–≤–µ—á–∞–µ—Ç: {['–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ù–µ—Ç, –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç', '–í–æ–∑–º–æ–∂–Ω–æ'][j % 3]}\n"
                else:
                    preview_text += f"üë§ –û—Ç–≤–µ—á–∞–µ—Ç: {['–î–∞', '–ù–µ—Ç', '–ù–µ –∑–Ω–∞—é'][j % 3]}\n"
                preview_text += "\n"
            
            preview_text += "---\n\n"
        
        preview_text += "‚úÖ **–ì–æ—Ç–æ–≤–æ!** –°–∫—Ä–∏–ø—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ 5 –ª–∏–¥–∞—Ö.\n"
        preview_text += "üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** 3 hot-–ª–∏–¥–∞, 2 warm-–ª–∏–¥–∞\n"
        preview_text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ–∑–≤–æ–Ω —Å hot-–ª–∏–¥–∞–º–∏"
        
        await query.message.reply_text(
            preview_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç", callback_data="activate_script"),
                    InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_script")
                ],
                [
                    InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π preview", callback_data="apply_and_test")
                ]
            ])
        )

    async def on_activate_script(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Activate script and start working"""
        query = update.callback_query
        await query.answer()
        
        # Track script activation
        await self._analytics.track_script_applied(query.from_user.id)
        
        await query.message.reply_text(
            "üéâ **–°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
            "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–∏–¥–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ\n"
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ hot-–ª–∏–¥–∞—Ö –∞–∫—Ç–∏–≤–Ω—ã\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /metrics - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /leads - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–∏–¥–æ–≤\n"
            "‚Ä¢ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "‚Ä¢ /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_metrics"),
                    InlineKeyboardButton("üë• –õ–∏–¥—ã", callback_data="show_leads")
                ],
                [
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")
                ]
            ])
        )

    async def on_dashboard_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle dashboard action buttons"""
        query = update.callback_query
        await query.answer()
        
        action = query.data
        
        if action == "detailed_metrics":
            await self._commands.on_detailed_metrics(update, context)
        elif action == "leads_list":
            await self._commands.on_leads(update, context)
        elif action == "export_csv":
            await self._commands.on_export_csv(update, context)
        elif action == "export_sheets":
            await self._commands.on_export_sheets(update, context)
        elif action == "refresh_metrics":
            await self._commands.on_metrics(update, context)
        elif action == "back_to_dashboard":
            await self._commands.on_metrics(update, context)
        elif action == "open_settings":
            await self._commands.on_settings(update, context)

    async def on_toggle_mandatory(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        cq = update.callback_query
        await cq.answer()
        _, _, qid = cq.data.split(":", 2)
        script: Script | None = context.user_data.get("script_model")
        if not script:
            return
        for qu in script.questions:
            if qu.id == qid:
                qu.mandatory = not qu.mandatory
                break
        await cq.message.reply_text("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

    async def on_weight_change(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        cq = update.callback_query
        await cq.answer()
        _, _, qid, sign = cq.data.split(":", 3)
        script: Script | None = context.user_data.get("script_model")
        if not script:
            return
        for qu in script.questions:
            if qu.id == qid:
                delta = 5 if sign == "+" else -5
                qu.weight = max(0, min(50, qu.weight + delta))
                break
        await cq.message.reply_text("–í–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")

    async def on_set_hot_values(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        cq = update.callback_query
        await cq.answer()
        _, _, qid = cq.data.split(":", 2)
        context.user_data["await_hot_values_for_qid"] = qid
        await cq.message.reply_text("–í–≤–µ–¥–∏—Ç–µ hot_values —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

    async def on_hot_values_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        qid = context.user_data.get("await_hot_values_for_qid")
        if not qid:
            return
        script: Script | None = context.user_data.get("script_model")
        if not script:
            return
        values = [v.strip() for v in (update.message.text or '').split(',') if v.strip()]
        for qu in script.questions:
            if qu.id == qid:
                qu.hot_values = values
                break
        context.user_data.pop("await_hot_values_for_qid", None)
        await update.message.reply_text("hot_values –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

    async def on_move_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        cq = update.callback_query
        await cq.answer()
        _, _, qid, direction = cq.data.split(":", 3)
        script: Script | None = context.user_data.get("script_model")
        if not script:
            return
        qs = sorted(script.questions, key=lambda z: z.order)
        idx = next((i for i, x in enumerate(qs) if x.id == qid), None)
        if idx is None:
            return
        if direction == "up" and idx > 0:
            qs[idx].order, qs[idx-1].order = qs[idx-1].order, qs[idx].order
        elif direction == "down" and idx < len(qs)-1:
            qs[idx].order, qs[idx+1].order = qs[idx+1].order, qs[idx].order
        script.questions = sorted(qs, key=lambda z: z.order)
        await cq.message.reply_text("–ü–æ—Ä—è–¥–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")

    async def on_change_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        cq = update.callback_query
        await cq.answer()
        _, _, qid = cq.data.split(":", 2)
        script: Script | None = context.user_data.get("script_model")
        if not script:
            return
        order = [QuestionType.text, QuestionType.number, QuestionType.choice, QuestionType.date]
        for qu in script.questions:
            if qu.id == qid:
                cur = order.index(qu.type)
                qu.type = order[(cur + 1) % len(order)]
                break
        await cq.message.reply_text("–¢–∏–ø –æ–±–Ω–æ–≤–ª—ë–Ω.")

    # ===== –û–Ω–±–æ—Ä–¥–∏–Ω–≥ =====
    async def on_onboarding_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        context.user_data["onboarding"] = {}
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞", callback_data="biz:–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞"),
             InlineKeyboardButton("–í—Ç–æ—Ä–∏—á–∫–∞", callback_data="biz:–í—Ç–æ—Ä–∏—á–∫–∞")],
            [InlineKeyboardButton("–ê—Ä–µ–Ω–¥–∞", callback_data="biz:–ê—Ä–µ–Ω–¥–∞"),
             InlineKeyboardButton("–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è", callback_data="biz:–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è")],
            [InlineKeyboardButton("–°–º–µ—à–∞–Ω–Ω–æ–µ", callback_data="biz:–°–º–µ—à–∞–Ω–Ω–æ–µ")],
        ])
        await query.message.reply_text("–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞?", reply_markup=kb)
        return Q_BIZ_TYPE

    async def on_q_biz_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        _, value = q.data.split(":", 1)
        context.user_data["onboarding"]["business_type"] = value
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("<3–º–ª–Ω", callback_data="avg:<3"),
             InlineKeyboardButton("3‚Äì7–º–ª–Ω", callback_data="avg:3-7")],
            [InlineKeyboardButton("7‚Äì15–º–ª–Ω", callback_data="avg:7-15"),
             InlineKeyboardButton(">15–º–ª–Ω", callback_data="avg:>15")],
            [InlineKeyboardButton("–ù–µ –∑–Ω–∞—é", callback_data="avg:unknown")],
        ])
        await q.message.reply_text("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫?", reply_markup=kb)
        return Q_AVG_CHECK

    async def on_q_avg_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        _, value = q.data.split(":", 1)
        context.user_data["onboarding"]["avg_check"] = value
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ê–≤–∏—Ç–æ", callback_data="ch:–ê–≤–∏—Ç–æ"),
             InlineKeyboardButton("–¶–∏–∞–Ω", callback_data="ch:–¶–∏–∞–Ω")],
            [InlineKeyboardButton("Instagram", callback_data="ch:Instagram"),
             InlineKeyboardButton("–†–µ–∫–ª–∞–º–∞", callback_data="ch:–†–µ–∫–ª–∞–º–∞")],
            [InlineKeyboardButton("–ó–≤–æ–Ω–∫–∏", callback_data="ch:–ó–≤–æ–Ω–∫–∏"),
             InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="ch:–î—Ä—É–≥–æ–µ")],
        ])
        await q.message.reply_text("–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è?", reply_markup=kb)
        return Q_CHANNEL

    async def on_q_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        _, value = q.data.split(":", 1)
        context.user_data["onboarding"]["channel"] = value
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–∫–∞–∑", callback_data="goal:+–ü–æ–∫–∞–∑")],
            [InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ–∑–≤–æ–Ω", callback_data="goal:+–°–æ–∑–≤–æ–Ω")],
            [InlineKeyboardButton("–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É", callback_data="goal:+–û—Ü–µ–Ω–∫–∞")],
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä", callback_data="goal:+–î–æ–≥–æ–≤–æ—Ä")],
            [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="goal:done")],
        ])
        await q.message.reply_text(
            "–¶–µ–ª—å —Å–∫—Ä–∏–ø—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=kb,
        )
        return Q_GOAL_MULTI

    async def on_q_goal_multi(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        goals: list[str] = context.user_data["onboarding"].setdefault("goals", [])
        _, value = q.data.split(":", 1)
        if value == "done":
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("–°—Ä–æ—á–Ω–æ (–Ω–µ–¥–µ–ª–∏)", callback_data="urg:–°—Ä–æ—á–Ω–æ")],
                [InlineKeyboardButton("1‚Äì3 –º–µ—Å", callback_data="urg:1-3")],
                [InlineKeyboardButton(">3 –º–µ—Å", callback_data="urg:>3")],
            ])
            await q.message.reply_text("–°—Ä–æ—á–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤?", reply_markup=kb)
            return Q_URGENCY
        else:
            if value not in goals:
                goals.append(value)
            await q.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {value}. –ù–∞–∂–º–∏—Ç–µ –µ—â—ë –∏–ª–∏ –ì–æ—Ç–æ–≤–æ.")
            return Q_GOAL_MULTI

    async def on_q_urgency(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        _, value = q.data.split(":", 1)
        context.user_data["onboarding"]["urgency"] = value
        await q.message.reply_text("–†–µ–≥–∏–æ–Ω / –≥–æ—Ä–æ–¥? (–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º)")
        return Q_REGION

    async def on_q_region(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data["onboarding"]["region"] = update.message.text.strip()
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ —É –≤–∞—Å? (—á–∏—Å–ª–æ)")
        return Q_AGENTS

    async def on_q_agents(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (update.message.text or "").strip()
        if not text.isdigit():
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 5")
            return Q_AGENTS
        context.user_data["onboarding"]["agents"] = int(text)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞", callback_data="out:yes"), InlineKeyboardButton("–ù–µ—Ç", callback_data="out:no")]
        ])
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±–æ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–∏–∞–ª–æ–≥–∏ —Å–∞–º (–∏—Å—Ö–æ–¥—è—â–∏–π)?", reply_markup=kb)
        return Q_OUTBOUND

    async def on_q_outbound(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        _, value = q.data.split(":", 1)
        context.user_data["onboarding"]["outbound"] = value
        if value == "yes":
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω", callback_data="legal:accept")],
                [InlineKeyboardButton("–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="legal:decline")],
            ])
            notice = (
                "–†–∏—Å–∫-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç —Å–æ–≥–ª–∞—Å–∏—è –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∑–∞–∫–æ–Ω–∞ –æ —Ä–µ–∫–ª–∞–º–µ."
                " –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Ä–∏—Å–∫–∏ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã."
            )
            await q.message.reply_text(notice, reply_markup=kb)
            return Q_LEGAL
        else:
            await self._finish_onboarding(q, context)
            return ConversationHandler.END

    async def on_q_legal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        _, value = q.data.split(":", 1)
        context.user_data["onboarding"]["legal"] = value
        if value != "accept":
            await q.message.reply_text("–ò—Å—Ö–æ–¥—è—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω.")
        await self._finish_onboarding(q, context)
        return ConversationHandler.END

    async def _finish_onboarding(self, q, context: ContextTypes.DEFAULT_TYPE):
        data = context.user_data.get("onboarding", {})
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        prompt_lines = [f"{k}: {v}" for k, v in data.items()]
        prompt = "\n".join(prompt_lines)
        await q.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã‚Ä¶")
        # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –≤—ã–≤–æ–¥
        dummy_update = Update(update_id=q.update_id, callback_query=q)
        await self._run_llm(dummy_update, context, source="onboarding")

    async def on_metrics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ú–µ—Ç—Ä–∏–∫–∏: –∫–æ–Ω–≤–µ—Ä—Å–∏—è 0%, –ª–∏–¥–æ–≤ 0 (–∑–∞–≥–ª—É—à–∫–∞)")

    async def on_leads(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–õ–∏–¥—ã: –ø–æ–∫–∞ –ø—É—Å—Ç–æ (–∑–∞–≥–ª—É—à–∫–∞)")

    async def on_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: CRM/Sheets/Calendar ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞). –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /export")

    async def on_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)")

    async def on_billing(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ë–∏–ª–ª–∏–Ω–≥: –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É (–∑–∞–≥–ª—É—à–∫–∞)")

    async def on_export(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ó–∞–≥–ª—É—à–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Excel
        await update.message.reply_text("–≠–∫—Å–ø–æ—Ä—Ç –ª–∏–¥–æ–≤ –≤ .xlsx (–∑–∞–≥–ª—É—à–∫–∞)")

    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    async def on_connect_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        auth_url = (
            f"{self.config.yandex_auth_url}?response_type=code&client_id={self.config.yandex_client_id}&redirect_uri={self.config.yandex_redirect_uri}"
        ) if (self.config.yandex_client_id and self.config.yandex_redirect_uri) else None
        if not auth_url:
            await update.message.reply_text("–Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
            return
        await update.message.reply_text(
            "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—è:\n1) –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å\n2) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥\n3) –û—Ç–ø—Ä–∞–≤—å—Ç–µ /calendar_code <CODE>")
        await update.message.reply_text(auth_url)

    async def on_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /calendar command"""
        await update.message.reply_text(
            "üìÖ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º*\n\n"
            "‚Ä¢ /connect_calendar - –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n"
            "‚Ä¢ /calendar_code <CODE> - –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
            "‚Ä¢ /calendar_status - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            parse_mode="Markdown"
        )
    
    async def on_calendar_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        from .integrations import YandexCalendarOAuth
        parts = (update.message.text or "").split(maxsplit=1)
        if len(parts) != 2:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /calendar_code <CODE>")
            return
        code = parts[1].strip()
        try:
            ya = YandexCalendarOAuth(
                self.config.yandex_client_id or "",
                self.config.yandex_client_secret or "",
                self.config.yandex_token_url,
                self.config.yandex_calendar_api_base,
            )
            tokens = await ya.exchange_code(code, self.config.yandex_redirect_uri or "")
            context.user_data["yandex_tokens"] = tokens
            await update.message.reply_text("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–¥–∫–ª—é—á—ë–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.")
        except Exception:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–º–µ–Ω—è—Ç—å –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞.")


def run_bot_sync() -> None:
    config = AppConfig.load()
    bot = ALBot(config)
    app = bot.build()
    logger.info("Starting AL-bot‚Ä¶")
    app.run_polling()


def main() -> None:
    try:
        run_bot_sync()
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    main()


