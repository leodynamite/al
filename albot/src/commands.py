"""
Additional bot commands for billing, analytics, and monitoring
"""
import asyncio
import io
from datetime import datetime
from typing import Optional, Dict, Any

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from .billing import BillingManager, SubscriptionTier
from .analytics import AnalyticsManager
from .monitoring import MonitoringManager
from .integrations import SupabaseClient


class BotCommands:
    """Additional bot commands handler"""
    
    def __init__(self, billing: BillingManager, analytics: AnalyticsManager, 
                 monitoring: MonitoringManager, supabase: SupabaseClient):
        self.billing = billing
        self.analytics = analytics
        self.monitoring = monitoring
        self.supabase = supabase
    
    async def on_metrics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /metrics command - show user metrics"""
        user = update.effective_user
        if not user:
            return
        
        try:
            # Get user metrics
            metrics = await self.analytics.get_user_metrics(user.id)
            
            # Get subscription info
            subscription = await self.billing.get_user_subscription(user.id)
            subscription_info = ""
            if subscription:
                subscription_info = self.billing.get_subscription_info(subscription)
            
            # Get detailed metrics
            dialogs_today = metrics.get('dialogs_today', 0)
            dialogs_week = metrics.get('dialogs_week', 0)
            hot_leads = metrics.get('hot_leads', 0)
            meetings_scheduled = metrics.get('meetings_scheduled', 0)
            leads_created = metrics.get('leads_created', 0)
            conversion_rate = metrics.get('conversion_rate', 0)
            avg_lead_score = metrics.get('avg_lead_score', 0)
            
            # Create dashboard table
            metrics_text = f"""
üìä *–î–≠–®–ë–û–†–î –ê–ì–ï–ù–¢–°–¢–í–ê*

*–ü–æ–¥–ø–∏—Å–∫–∞:* {subscription_info}

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìà –î–ò–ê–õ–û–ì–ò                       ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ –°–µ–≥–æ–¥–Ω—è: {dialogs_today:>3} –¥–∏–∞–ª–æ–≥–æ–≤        ‚îÇ
‚îÇ –ó–∞ –Ω–µ–¥–µ–ª—é: {dialogs_week:>3} –¥–∏–∞–ª–æ–≥–æ–≤       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üî• –õ–ò–î–´                         ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: {leads_created:>3}              ‚îÇ
‚îÇ Hot –ª–∏–¥–æ–≤: {hot_leads:>3}                   ‚îÇ
‚îÇ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_rate:>5.1%}              ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìÖ –í–°–¢–†–ï–ß–ò                      ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {meetings_scheduled:>3} –≤—Å—Ç—Ä–µ—á        ‚îÇ
‚îÇ –°—Ä–µ–¥–Ω–∏–π score: {avg_lead_score:>3}            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
            """
            
            # Create keyboard with export options
            keyboard = [
                [
                    InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_metrics"),
                    InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤", callback_data="leads_list")
                ],
                [
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_csv"),
                    InlineKeyboardButton("üìà Google Sheets", callback_data="export_sheets")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_metrics")
                ]
            ]
            
            await update.message.reply_text(
                metrics_text, 
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {str(e)}")
    
    async def on_detailed_metrics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show detailed metrics"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        try:
            # Get detailed metrics
            metrics = await self.analytics.get_user_metrics(user.id)
            
            detailed_text = f"""
üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

*üìà –î–∏–∞–ª–æ–≥–∏:*
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {metrics.get('dialogs_today', 0)}
‚Ä¢ –í—á–µ—Ä–∞: {metrics.get('dialogs_yesterday', 0)}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {metrics.get('dialogs_week', 0)}
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {metrics.get('dialogs_month', 0)}

*üî• –õ–∏–¥—ã:*
‚Ä¢ –í—Å–µ–≥–æ: {metrics.get('leads_created', 0)}
‚Ä¢ Hot: {metrics.get('hot_leads', 0)}
‚Ä¢ Warm: {metrics.get('warm_leads', 0)}
‚Ä¢ Cold: {metrics.get('cold_leads', 0)}

*üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è:*
‚Ä¢ –û–±—â–∞—è: {metrics.get('conversion_rate', 0):.1%}
‚Ä¢ Hot ‚Üí –≤—Å—Ç—Ä–µ—á–∞: {metrics.get('hot_to_meeting_rate', 0):.1%}
‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ ‚Üí —Å–¥–µ–ª–∫–∞: {metrics.get('meeting_to_deal_rate', 0):.1%}

*üìÖ –í—Å—Ç—Ä–µ—á–∏:*
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {metrics.get('meetings_scheduled', 0)}
‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {metrics.get('meetings_completed', 0)}
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ: {metrics.get('meetings_cancelled', 0)}

*üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π score: {metrics.get('avg_lead_score', 0)}
‚Ä¢ –õ—É—á—à–∏–π score: {metrics.get('max_lead_score', 0)}
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metrics.get('avg_response_time', 0):.1f} —Å–µ–∫
            """
            
            await query.message.reply_text(
                detailed_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –¥—ç—à–±–æ—Ä–¥—É", callback_data="back_to_dashboard")]
                ])
            )
            
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def on_export_csv(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Export metrics to CSV"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        try:
            # Get user leads
            leads = await self.supabase.get_user_leads(user.id)
            
            # Create CSV content
            csv_content = "ID,–ò–º—è,–¢–µ–ª–µ—Ñ–æ–Ω,Email,Score,–°—Ç–∞—Ç—É—Å,–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è,–ò—Å—Ç–æ—á–Ω–∏–∫\n"
            for lead in leads:
                csv_content += f"{lead.get('id', '')},{lead.get('name', '')},{lead.get('phone', '')},{lead.get('email', '')},{lead.get('score', 0)},{lead.get('status', '')},{lead.get('created_at', '')},{lead.get('source', '')}\n"
            
            # Send CSV as file
            await query.message.reply_document(
                document=io.BytesIO(csv_content.encode('utf-8')),
                filename=f"leads_{user.id}_{datetime.now().strftime('%Y%m%d')}.csv",
                caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç –ª–∏–¥–æ–≤ –≤ CSV"
            )
            
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    
    async def on_export_sheets(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Export to Google Sheets"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        try:
            # Check if user has Google Sheets integration
            sheets_connected = await self.supabase.check_google_sheets_integration(user.id)
            
            if not sheets_connected:
                # Show integration setup
                await query.message.reply_text(
                    "üîó *Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è*\n\n"
                    "–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é:\n\n"
                    "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /settings\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ 'Google Sheets'\n"
                    "3. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Google\n"
                    "4. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º\n\n"
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="open_settings")]
                    ])
                )
            else:
                # Export to Google Sheets
                await query.message.reply_text("üìà –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –≤ Google Sheets...")
                
                # Simulate export
                await asyncio.sleep(2)
                
                await query.message.reply_text(
                    "‚úÖ *–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
                    "üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google Sheets\n"
                    "üîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É](https://docs.google.com/spreadsheets/d/example)\n\n"
                    "–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç.",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_metrics")]
                    ])
                )
                
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    
    async def on_leads(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /leads command - show recent leads"""
        user = update.effective_user
        if not user:
            return
        
        try:
            # Get user leads from database
            leads = await self.supabase.get_user_leads(user.id)
            
            if not leads:
                await update.message.reply_text(
                    "üìã *–°–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤*\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–æ–≤.\n"
                    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # Create leads table
            leads_text = "üìã *–°–ü–ò–°–û–ö –õ–ò–î–û–í*\n\n"
            leads_text += "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            leads_text += "‚îÇ –ò–º—è                ‚îÇ –¢–µ–ª–µ—Ñ–æ–Ω        ‚îÇ Score ‚îÇ –°—Ç–∞—Ç—É—Å ‚îÇ\n"
            leads_text += "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
            
            for lead in leads[:10]:  # Show first 10 leads
                name = lead.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:15]
                phone = lead.get('phone', '')[:12]
                score = lead.get('score', 0)
                status = lead.get('status', 'new')
                
                # Status emoji
                status_emoji = "üî•" if score >= 70 else "üü°" if score >= 40 else "‚ùÑÔ∏è"
                
                leads_text += f"‚îÇ {name:<15} ‚îÇ {phone:<12} ‚îÇ {score:>3}  ‚îÇ {status_emoji} {status:<4} ‚îÇ\n"
            
            leads_text += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            
            # Add summary
            hot_count = sum(1 for lead in leads if lead.get('score', 0) >= 70)
            warm_count = sum(1 for lead in leads if 40 <= lead.get('score', 0) < 70)
            cold_count = sum(1 for lead in leads if lead.get('score', 0) < 40)
            
            leads_text += f"*üìä –ò—Ç–æ–≥–æ:* {len(leads)} –ª–∏–¥–æ–≤\n"
            leads_text += f"‚Ä¢ üî• Hot: {hot_count}\n"
            leads_text += f"‚Ä¢ üü° Warm: {warm_count}\n"
            leads_text += f"‚Ä¢ ‚ùÑÔ∏è Cold: {cold_count}\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="detailed_analytics"),
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_metrics"),
                    InlineKeyboardButton("üîô –î—ç—à–±–æ—Ä–¥", callback_data="back_to_dashboard")
                ]
            ]
            
            await update.message.reply_text(
                leads_text, 
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤: {str(e)}")
    
    async def on_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /settings command - show integration settings"""
        user = update.effective_user
        if not user:
            return
        
        try:
            # Get integration status
            integration_manager = getattr(self, 'integration_manager', None)
            if not integration_manager:
                from .integration_manager import IntegrationManager
                integration_manager = IntegrationManager(self.supabase)
                self.integration_manager = integration_manager
            
            status = await integration_manager.get_integration_status(user.id)
            
            # Build status text
            settings_text = "‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ô*\n\n"
            
            # CRM Status
            crm_status = "‚úÖ" if status["crm"]["connected"] else "‚ùå"
            crm_type = status["crm"]["type"].upper() if status["crm"]["type"] != "none" else "–ù–µ –ø–æ–¥–∫–ª—é—á—ë–Ω"
            settings_text += f"*üè¢ CRM:* {crm_status} {crm_type}\n"
            
            # Calendar Status
            calendar_status = "‚úÖ" if status["calendar"]["connected"] else "‚ùå"
            calendar_type = status["calendar"]["type"].upper() if status["calendar"]["type"] != "none" else "–ù–µ –ø–æ–¥–∫–ª—é—á—ë–Ω"
            settings_text += f"*üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å:* {calendar_status} {calendar_type}\n"
            
            # Email Status
            email_status = "‚úÖ" if status["email"]["connected"] else "‚ùå"
            email_manager = status["email"]["manager_email"] if status["email"]["manager_email"] != "not_set" else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            settings_text += f"*üìß Email:* {email_status} {email_manager}\n"
            
            # Google Sheets Status
            sheets_status = "‚úÖ" if status["google_sheets"]["connected"] else "‚ùå"
            settings_text += f"*üìä Google Sheets:* {sheets_status}\n"
            
            settings_text += "\n*üí° –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:*"
            
            keyboard = [
                [
                    InlineKeyboardButton("üè¢ CRM", callback_data="setup_crm"),
                    InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="setup_calendar")
                ],
                [
                    InlineKeyboardButton("üìß Email", callback_data="setup_email"),
                    InlineKeyboardButton("üìä Google Sheets", callback_data="setup_sheets")
                ],
                [
                    InlineKeyboardButton("üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", callback_data="test_integrations"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="disconnect_all")
                ]
            ]
            
            await update.message.reply_text(
                settings_text, 
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
    
    async def on_setup_crm(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Setup CRM integration"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        try:
            setup_text = """
üè¢ *–ù–ê–°–¢–†–û–ô–ö–ê CRM*

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É CRM —Å–∏—Å—Ç–µ–º—É:

*amoCRM:*
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OAuth 2.0
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–∏–¥–æ–≤
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤

*Bitrix24:*
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OAuth
‚Ä¢ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–æ—Ä–æ–Ω–∫–æ–π
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–∏–¥–∞—Ö

*Webhook (–ª—é–±–∞—è CRM):*
‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ webhook
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö CRM
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üîó amoCRM", callback_data="connect_amocrm"),
                    InlineKeyboardButton("üè¢ Bitrix24", callback_data="connect_bitrix24")
                ],
                [
                    InlineKeyboardButton("üîå Webhook", callback_data="setup_webhook"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å CRM", callback_data="disconnect_crm")
                ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
                ]
            ]
            
            await query.message.reply_text(
                setup_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def on_setup_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Setup Calendar integration"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        try:
            setup_text = """
üìÖ *–ù–ê–°–¢–†–û–ô–ö–ê –ö–ê–õ–ï–ù–î–ê–†–Ø*

*–Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—å:*
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OAuth 2.0
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–∞—à–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö

*Google Calendar:*
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google OAuth
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Gmail
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

*Outlook:*
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Microsoft OAuth
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Office 365
‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üìÖ –Ø–Ω–¥–µ–∫—Å.–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="connect_yandex_calendar"),
                    InlineKeyboardButton("üìä Google Calendar", callback_data="connect_google_calendar")
                ],
                [
                    InlineKeyboardButton("üìß Outlook", callback_data="connect_outlook"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="disconnect_calendar")
                ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
                ]
            ]
            
            await query.message.reply_text(
                setup_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def on_setup_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Setup Email integration"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        try:
            setup_text = """
üìß *–ù–ê–°–¢–†–û–ô–ö–ê EMAIL*

*SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ Gmail: smtp.gmail.com:587
‚Ä¢ Yandex: smtp.yandex.ru:587
‚Ä¢ Mail.ru: smtp.mail.ru:587
‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞

*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*
‚Ä¢ Email –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è hot –ª–∏–¥–æ–≤
‚Ä¢ –®–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

*–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ App Passwords
‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ SMTP
‚Ä¢ –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üìß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SMTP", callback_data="setup_smtp"),
                    InlineKeyboardButton("üë§ Email –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="setup_manager_email")
                ],
                [
                    InlineKeyboardButton("üìù –®–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º", callback_data="setup_email_templates"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å email", callback_data="disconnect_email")
                ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
                ]
            ]
            
            await query.message.reply_text(
                setup_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def on_test_integrations(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Test all integrations"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        try:
            await query.message.reply_text("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            
            # Get integration manager
            integration_manager = getattr(self, 'integration_manager', None)
            if not integration_manager:
                from .integration_manager import IntegrationManager
                integration_manager = IntegrationManager(self.supabase)
                self.integration_manager = integration_manager
            
            # Test CRM
            crm_result = await integration_manager.test_crm_connection(user.id)
            crm_status = "‚úÖ" if crm_result.get("status") == "connected" else "‚ùå"
            crm_message = crm_result.get("message", "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Test Calendar
            calendar_result = await integration_manager.test_calendar_connection(user.id)
            calendar_status = "‚úÖ" if calendar_result.get("status") == "connected" else "‚ùå"
            calendar_message = calendar_result.get("message", "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Test Email
            email_result = await integration_manager.test_email_connection(user.id)
            email_status = "‚úÖ" if email_result.get("status") == "connected" else "‚ùå"
            email_message = email_result.get("message", "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            test_results = f"""
üîç *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø*

*üè¢ CRM:* {crm_status} {crm_message}

*üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å:* {calendar_status} {calendar_message}

*üìß Email:* {email_status} {email_message}

*üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings"),
                    InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç", callback_data="test_integrations")
                ]
            ]
            
            await query.message.reply_text(
                test_results,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
    
    async def on_billing(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /billing command - show billing information"""
        user = update.effective_user
        if not user:
            return
        
        try:
            subscription = await self.billing.get_user_subscription(user.id)
            if not subscription:
                await update.message.reply_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            billing_text = f"""
üí∞ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ*

*–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:* {subscription.tier.value.title()}
*–°—Ç–∞—Ç—É—Å:* {subscription.status.value.title()}

*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*
‚Ä¢ –î–∏–∞–ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {subscription.dialogs_used}
‚Ä¢ –õ–∏–º–∏—Ç –¥–∏–∞–ª–æ–≥–æ–≤: {subscription.dialogs_limit if subscription.dialogs_limit > 0 else '–ë–µ–∑–ª–∏–º–∏—Ç'}

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:*
‚Ä¢ ü•â Basic: 9,900 ‚ÇΩ/–º–µ—Å (50-100 –¥–∏–∞–ª–æ–≥–æ–≤, –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)
‚Ä¢ ü•à Pro: 19,900 ‚ÇΩ/–º–µ—Å (–¥–æ 300 –¥–∏–∞–ª–æ–≥–æ–≤, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è, CRM)
‚Ä¢ ü•á Enterprise: 39,900 ‚ÇΩ/–º–µ—Å (500+ –¥–∏–∞–ª–æ–≥–æ–≤, –∫–∞—Å—Ç–æ–º-–±–æ—Ç, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
            """
            
            if subscription.status.value == "trial":
                trial_info = self.billing.get_trial_info(subscription)
                billing_text += f"\n*Trial:* {trial_info}"
            
            keyboard = []
            if subscription.status.value in ["trial", "expired"] or subscription.is_read_only:
                keyboard.extend([
                    [InlineKeyboardButton("ü•â Basic (9,900 ‚ÇΩ)", callback_data="subscribe_basic")],
                    [InlineKeyboardButton("ü•à Pro (19,900 ‚ÇΩ)", callback_data="subscribe_pro")],
                    [InlineKeyboardButton("ü•á Enterprise (39,900 ‚ÇΩ)", callback_data="subscribe_enterprise")]
                ])
            
            if subscription.status.value == "active":
                keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription")])
            
            await update.message.reply_text(
                billing_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ: {str(e)}")
    
    async def on_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /stop command - pause bot operations"""
        user = update.effective_user
        if not user:
            return
        
        # Track subscription cancellation
        subscription = await self.billing.get_user_subscription(user.id)
        if subscription:
            await self.analytics.track_subscription_cancelled(user.id, subscription.tier.value)
            await self.billing.cancel_subscription(user.id)
        
        await update.message.reply_text(
            "‚è∏Ô∏è –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
    
    async def on_export(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /export command - export leads to Excel"""
        user = update.effective_user
        if not user:
            return
        
        try:
            # Track export event
            await self.analytics.track_event("export_requested", user.id, {"format": "excel"})
            
            # Generate export file (placeholder)
            export_text = """
üì§ *–≠–∫—Å–ø–æ—Ä—Ç –ª–∏–¥–æ–≤*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
‚Ä¢ Excel (.xlsx) - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
‚Ä¢ CSV (.csv) - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
‚Ä¢ JSON (.json) - –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

*–ß—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è:*
‚Ä¢ –í—Å–µ –ª–∏–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ Scores –∏ —Å—Ç–∞—Ç—É—Å—ã
‚Ä¢ –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ª–∏–¥–æ–≤
            """
            
            keyboard = [
                [InlineKeyboardButton("üìä Excel (.xlsx)", callback_data="export_excel")],
                [InlineKeyboardButton("üìÑ CSV (.csv)", callback_data="export_csv")],
                [InlineKeyboardButton("üîß JSON (.json)", callback_data="export_json")]
            ]
            
            await update.message.reply_text(
                export_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    
    async def on_delete_my_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /delete_my_data command - GDPR compliance"""
        user = update.effective_user
        if not user:
            return
        
        try:
            # Show confirmation
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="confirm_delete_data")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_data")]
            ]
            
            await update.message.reply_text(
                "‚ö†Ô∏è *–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö*\n\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:\n"
                "‚Ä¢ –í—Å–µ –≤–∞—à–∏ –ª–∏–¥—ã\n"
                "‚Ä¢ –°–∫—Ä–∏–ø—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤\n"
                "‚Ä¢ –ü–æ–¥–ø–∏—Å–∫—É –∏ –ø–ª–∞—Ç–µ–∂–∏\n\n"
                "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def on_terms(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /terms command - show terms of service"""
        terms_text = """
üìã *–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AL Bot*

*–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –¥–∞–Ω–Ω—ã–µ:*
–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–µ—Å—ë—Ç –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∑–∞–∫–æ–Ω–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –§–ó-152 "–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö".

*–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:*
‚Ä¢ –õ–∏–¥—ã —à–∏—Ñ—Ä—É—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ email –º–∞—Å–∫–∏—Ä—É—é—Ç—Å—è –≤ –ª–æ–≥–∞—Ö
‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å GDPR
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*
‚Ä¢ Trial: 14 –¥–Ω–µ–π –∏–ª–∏ 50 –¥–∏–∞–ª–æ–≥–æ–≤
‚Ä¢ –ü–æ—Å–ª–µ trial: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –∏—Å—Ç–æ—Ä–∏–∏
‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

*–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:*
‚Ä¢ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: —á–µ—Ä–µ–∑ OAuth (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
‚Ä¢ CRM: —á–µ—Ä–µ–∑ API (–∑–∞—â–∏—â—ë–Ω–Ω–æ)
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç: –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
‚Ä¢ Telegram: @albot_support
‚Ä¢ Email: support@albot.ru
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs.albot.ru
        """
        
        await update.message.reply_text(terms_text, parse_mode=ParseMode.MARKDOWN)
    
    async def on_system_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /status command - show system status (admin only)"""
        user = update.effective_user
        if not user:
            return
        
        # Check if user is admin (placeholder)
        if user.id not in [123456789]:  # Replace with actual admin IDs
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            status = await self.monitoring.get_system_status()
            
            status_text = f"""
üîß *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

*–í—Ä–µ–º—è:* {status.get('timestamp', 'N/A')}
*–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {status.get('active_users', 0)}
*–î–∏–∞–ª–æ–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è:* {status.get('total_dialogs_today', 0)}
*–û—à–∏–±–æ–∫ –∑–∞ 5 –º–∏–Ω:* {status.get('error_rate', 0):.1%}
*–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π:* {status.get('queue_size', 0)}
*–ù–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤:* {status.get('unresolved_alerts', 0)}
            """
            
            await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
