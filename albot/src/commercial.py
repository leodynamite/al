"""
Commercial logic and value proposition
"""
from typing import Dict, Any, Optional
from datetime import datetime, timedelta
from .billing import BillingManager, SubscriptionTier, UserSubscription
from .branding import BrandingManager
from .analytics import AnalyticsManager


class CommercialManager:
    """Commercial logic and value proposition management"""
    
    def __init__(self, billing_manager: BillingManager, branding_manager: BrandingManager, analytics_manager: AnalyticsManager):
        self._billing = billing_manager
        self._branding = branding_manager
        self._analytics = analytics_manager
    
    async def get_value_proposition(self, user_id: int) -> Dict[str, Any]:
        """Get personalized value proposition"""
        subscription = await self._billing.get_user_subscription(user_id)
        branding = await self._branding.get_bot_branding(user_id)
        
        if subscription and subscription.tier == SubscriptionTier.TRIAL:
            return {
                "trial_mode": True,
                "bot_name": "AL Bot",
                "bot_logo": None,
                "theme_color": "#007bff",
                "message": "–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç AL Bot",
                "upgrade_benefit": "–í –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ",
                "psychological_effect": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä—ã—á–∞–≥: –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–≤–µ—Ä—è—é—Ç –±–æ–ª—å—à–µ, –∫–æ–≥–¥–∞ –≤–∏–¥—è—Ç –≤–∞—à–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ"
            }
        elif subscription and subscription.tier in [SubscriptionTier.BASIC, SubscriptionTier.PRO, SubscriptionTier.ENTERPRISE]:
            return {
                "trial_mode": False,
                "bot_name": branding.bot_name,
                "bot_logo": branding.bot_logo_url,
                "theme_color": branding.theme_color,
                "message": f"–ö–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç {branding.bot_name}",
                "upgrade_benefit": "–ü–æ–ª–Ω—ã–π –±—Ä–µ–Ω–¥–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω",
                "psychological_effect": "–ö–ª–∏–µ–Ω—Ç—ã –æ–±—â–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —Å –≤–∞—à–∏–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º"
            }
        else:
            return {
                "trial_mode": True,
                "bot_name": "AL Bot",
                "bot_logo": None,
                "theme_color": "#007bff",
                "message": "–ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞",
                "upgrade_benefit": "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±—Ä–µ–Ω–¥–∏–Ω–≥–∞",
                "psychological_effect": "–ü–æ–∫–∞–∂–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º, —á—Ç–æ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –≤–∞—à–∏–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º"
            }
    
    async def get_commercial_offer(self, user_id: int) -> Dict[str, Any]:
        """Get commercial offer based on user status"""
        subscription = await self._billing.get_user_subscription(user_id)
        
        if not subscription:
            # New user - show trial offer
            return {
                "offer_type": "trial",
                "title": "üöÄ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç 14 –¥–Ω–µ–π",
                "description": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ AL Bot –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                "benefits": [
                    "14 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                    "–î–æ 50 –¥–∏–∞–ª–æ–≥–æ–≤",
                    "–ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª",
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ AL Bot"
                ],
                "limitations": [
                    "–ö–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç AL Bot (–Ω–µ –≤–∞—à–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ)",
                    "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è",
                    "–ë–∞–∑–æ–≤—ã–π –±—Ä–µ–Ω–¥–∏–Ω–≥"
                ],
                "cta": "–ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç",
                "price": "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
            }
        elif subscription.tier == SubscriptionTier.TRIAL:
            # Trial user - show upgrade offer
            days_left = (subscription.trial_end - datetime.utcnow()).days if subscription.trial_end else 0
            
            return {
                "offer_type": "upgrade",
                "title": f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π",
                "description": "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é",
                "benefits": [
                    "–ö–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç –≤–∞—à–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ",
                    "–í–∞—à –ª–æ–≥–æ—Ç–∏–ø –∏ —Ü–≤–µ—Ç–∞",
                    "–ë–æ–ª—å—à–µ –¥–∏–∞–ª–æ–≥–æ–≤",
                    "CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
                ],
                "psychological_effect": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä—ã—á–∞–≥: –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–≤–µ—Ä—è—é—Ç –±–æ–ª—å—à–µ, –∫–æ–≥–¥–∞ –≤–∏–¥—è—Ç –≤–∞—à–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ",
                "cta": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                "pricing": {
                    "basic": {"price": "9 900 ‚ÇΩ/–º–µ—Å", "dialogs": "–¥–æ 100"},
                    "pro": {"price": "19 900 ‚ÇΩ/–º–µ—Å", "dialogs": "–¥–æ 300"},
                    "enterprise": {"price": "39 900 ‚ÇΩ/–º–µ—Å", "dialogs": "–±–µ–∑–ª–∏–º–∏—Ç"}
                }
            }
        else:
            # Paid user - show current plan
            return {
                "offer_type": "current_plan",
                "title": f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {subscription.tier.value}",
                "description": "–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é",
                "benefits": [
                    "–ü–æ–ª–Ω—ã–π –±—Ä–µ–Ω–¥–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω",
                    "–ö–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç –≤–∞—à–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ",
                    "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã",
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
                ],
                "usage": {
                    "dialogs_used": subscription.dialogs_used,
                    "dialogs_limit": subscription.dialogs_limit,
                    "usage_percent": (subscription.dialogs_used / subscription.dialogs_limit * 100) if subscription.dialogs_limit > 0 else 0
                }
            }
    
    async def get_roi_calculation(self, user_id: int) -> Dict[str, Any]:
        """Calculate ROI for the user"""
        subscription = await self._billing.get_user_subscription(user_id)
        
        if not subscription:
            return {
                "message": "–ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å ROI",
                "calculation": "ROI –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"
            }
        
        # Get user metrics
        metrics = await self._analytics.get_user_metrics(user_id)
        
        if not metrics:
            return {
                "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ROI",
                "calculation": "ROI –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –ø–æ—Å–ª–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            }
        
        # Calculate ROI
        dialogs_count = metrics.get('total_dialogs', 0)
        hot_leads = metrics.get('hot_leads', 0)
        meetings_scheduled = metrics.get('meetings_scheduled', 0)
        
        # Assumptions for ROI calculation
        avg_deal_value = 500000  # 500k rubles average deal
        conversion_rate = 0.05   # 5% conversion from hot leads to deals
        monthly_cost = self._get_monthly_cost(subscription.tier)
        
        potential_revenue = hot_leads * conversion_rate * avg_deal_value
        roi_percent = ((potential_revenue - monthly_cost) / monthly_cost * 100) if monthly_cost > 0 else 0
        
        return {
            "message": "üí∞ –†–∞—Å—á–µ—Ç ROI",
            "calculation": {
                "dialogs": dialogs_count,
                "hot_leads": hot_leads,
                "meetings": meetings_scheduled,
                "potential_deals": hot_leads * conversion_rate,
                "potential_revenue": potential_revenue,
                "monthly_cost": monthly_cost,
                "roi_percent": roi_percent,
                "payback_period": monthly_cost / (potential_revenue / 30) if potential_revenue > 0 else "‚àû"
            },
            "conclusion": "–û–∫—É–ø–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏!" if roi_percent > 0 else "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è ROI"
        }
    
    def _get_monthly_cost(self, tier: SubscriptionTier) -> int:
        """Get monthly cost for subscription tier"""
        costs = {
            SubscriptionTier.TRIAL: 0,
            SubscriptionTier.BASIC: 9900,
            SubscriptionTier.PRO: 19900,
            SubscriptionTier.ENTERPRISE: 39900
        }
        return costs.get(tier, 0)
    
    async def get_psychological_benefits(self) -> Dict[str, Any]:
        """Get psychological benefits of branding"""
        return {
            "title": "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞",
            "benefits": [
                {
                    "title": "–î–æ–≤–µ—Ä–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "description": "–ö–ª–∏–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –¥–æ–≤–µ—Ä—è—é—Ç, –∫–æ–≥–¥–∞ –≤–∏–¥—è—Ç –≤–∞—à–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ, –∞ –Ω–µ AL Bot",
                    "impact": "–í—ã—Å–æ–∫–∏–π"
                },
                {
                    "title": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–∏–¥–∂",
                    "description": "–°–æ–∑–¥–∞–µ—Ç—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º",
                    "impact": "–í—ã—Å–æ–∫–∏–π"
                },
                {
                    "title": "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ",
                    "description": "–í—ã–¥–µ–ª—è–π—Ç–µ—Å—å —Å—Ä–µ–¥–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏",
                    "impact": "–°—Ä–µ–¥–Ω–∏–π"
                },
                {
                    "title": "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å",
                    "description": "–û–¥–∏–Ω –±–æ—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ—Ç–Ω–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
                    "impact": "–í—ã—Å–æ–∫–∏–π"
                }
            ],
            "conclusion": "–ë—Ä–µ–Ω–¥–∏–Ω–≥ = –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä—ã—á–∞–≥ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"
        }
    
    async def get_competitive_advantages(self) -> Dict[str, Any]:
        """Get competitive advantages"""
        return {
            "title": "üèÜ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞",
            "advantages": [
                {
                    "title": "24/7 —Ä–∞–±–æ—Ç–∞",
                    "description": "–ë–æ—Ç –Ω–µ —Å–ø–∏—Ç, –Ω–µ –±–æ–ª–µ–µ—Ç, –Ω–µ —É—Å—Ç–∞–µ—Ç",
                    "vs_human": "–ß–µ–ª–æ–≤–µ–∫: 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å, –≤—ã—Ö–æ–¥–Ω—ã–µ, –æ—Ç–ø—É—Å–∫"
                },
                {
                    "title": "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
                    "description": "–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∑–∞ —Å–µ–∫—É–Ω–¥—ã",
                    "vs_human": "–ß–µ–ª–æ–≤–µ–∫: –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç, –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å —á–∞—Å–∞–º–∏"
                },
                {
                    "title": "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å",
                    "description": "–í—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                    "vs_human": "–ß–µ–ª–æ–≤–µ–∫: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —É—Å—Ç–∞–ª–æ—Å—Ç—å, –æ–ø—ã—Ç"
                },
                {
                    "title": "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å",
                    "description": "–û–¥–∏–Ω –±–æ—Ç = —Å–æ—Ç–Ω–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "vs_human": "–ß–µ–ª–æ–≤–µ–∫: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤"
                },
                {
                    "title": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    "description": "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–∏–∞–ª–æ–≥—É",
                    "vs_human": "–ß–µ–ª–æ–≤–µ–∫: —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞"
                }
            ],
            "conclusion": "AI-–±–æ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º"
        }
    
    async def get_success_stories(self) -> Dict[str, Any]:
        """Get success stories and case studies"""
        return {
            "title": "üìà –ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞",
            "stories": [
                {
                    "agency": "–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ '–î–æ–º –ü–ª—é—Å'",
                    "result": "–£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—é –Ω–∞ 40%",
                    "details": "–ó–∞ –º–µ—Å—è—Ü –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ 500 –ª–∏–¥–æ–≤, –ø–æ–ª—É—á–∏–ª–∏ 25 –≥–æ—Ä—è—á–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "roi": "ROI 300% –∑–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü"
                },
                {
                    "agency": "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¶–µ–Ω—Ç—Ä",
                    "result": "–°–æ–∫—Ä–∞—Ç–∏–ª–∏ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–æ–≤ –≤ 5 —Ä–∞–∑",
                    "details": "–†–∞–Ω—å—à–µ: 2 —á–∞—Å–∞ –Ω–∞ –ª–∏–¥–∞, —Å–µ–π—á–∞—Å: 20 –º–∏–Ω—É—Ç",
                    "roi": "–≠–∫–æ–Ω–æ–º–∏—è 80% –≤—Ä–µ–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
                },
                {
                    "agency": "–≠–ª–∏—Ç –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
                    "result": "–£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –≤ 3 —Ä–∞–∑–∞",
                    "details": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ",
                    "roi": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ 2 –º–ª–Ω —Ä—É–±/–º–µ—Å"
                }
            ],
            "conclusion": "–†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤"
        }

